// Code generated by MockGen. DO NOT EDIT.
// Source: sum_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSumCalculator is a mock of SumCalculator interface.
type MockSumCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockSumCalculatorMockRecorder
}

// MockSumCalculatorMockRecorder is the mock recorder for MockSumCalculator.
type MockSumCalculatorMockRecorder struct {
	mock *MockSumCalculator
}

// NewMockSumCalculator creates a new mock instance.
func NewMockSumCalculator(ctrl *gomock.Controller) *MockSumCalculator {
	mock := &MockSumCalculator{ctrl: ctrl}
	mock.recorder = &MockSumCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSumCalculator) EXPECT() *MockSumCalculatorMockRecorder {
	return m.recorder
}

// SumNumbers mocks base method.
func (m *MockSumCalculator) SumNumbers(ctx context.Context, v interface{}) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumNumbers", ctx, v)
	ret0, _ := ret[0].(int)
	return ret0
}

// SumNumbers indicates an expected call of SumNumbers.
func (mr *MockSumCalculatorMockRecorder) SumNumbers(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumNumbers", reflect.TypeOf((*MockSumCalculator)(nil).SumNumbers), ctx, v)
}

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHasher) Hash(n int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", n)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherMockRecorder) Hash(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasher)(nil).Hash), n)
}
